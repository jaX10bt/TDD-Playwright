name: Get Package Versions

on: workflow_dispatch

jobs:
  get-packages:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Get package versions
        run: |
          PACKAGES=(
            "buerokratt-chatbot"
            "training-module"
            "analytics-module"
            "service-module"
            "chat-widget"
            "buerokratt-dsl"
            "ruuter"
            "datamapper"
            "resql"
            "tim"
            "cronmanager"
            "xtr"
            "authentication-layer"
            "s3-ferry"
          )

          # Create or clear the output file
          OUTPUT_FILE="docker_image_tags.txt"
          echo "Latest Docker Image Tags:" > "$OUTPUT_FILE"

          # GitHub API token (required for authentication)
          GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"

          ORG="buerokratt"

          for PACKAGE in "${PACKAGES[@]}"; do
            echo "Fetching tags for $ORG ($PACKAGE)..."

            # Fetch package versions using GitHub REST API
            response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                          "https://api.github.com/orgs/$ORG/packages/container/$PACKAGE/versions")

            # Print the raw response for debugging
            echo "Response for $PACKAGE: $response"

            # Check for errors in the response
            if echo "$response" | jq -e '.message' > /dev/null; then
              echo "Error fetching tags for $PACKAGE: $(echo "$response" | jq -r '.message')" >> "$OUTPUT_FILE"
              continue
            fi

            # Get the latest version based on the `created_at` date
            latest_version=$(echo "$response" | jq -r 'sort_by(.created_at) | .[-1] | .metadata.container.tags[]')

            if [ -n "$latest_version" ]; then
              echo "Latest tag for $PACKAGE: $latest_version" >> "$OUTPUT_FILE"
            else
              echo "No tags found for $PACKAGE." >> "$OUTPUT_FILE"
            fi
          done

          echo "Latest Docker image tags written to $OUTPUT_FILE."

      - name: Upload docker tags file
        uses: actions/upload-artifact@v4
        with:
          name: latest-docker-image-tags
          path: docker_image_tags.txt
