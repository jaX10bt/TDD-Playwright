name: Get Package Versions

on: workflow_dispatch

jobs:
  get-packages:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Get package versions
        run: |
          IMAGES=(
            "buerokratt/Buerokratt-Chatbot"
            "buerokratt/Training-Module"
            "buerokratt/Analytics-Module"
            "buerokratt/Service-Module"
            "buerokratt/Chat-Widget"
            "buerokratt/Buerokratt-DSL"
            "buerokratt/Ruuter"
            "buerokratt/DataMapper"
            "buerokratt/Resql"
            "buerokratt/TIM"
            "buerokratt/CronManager"
            "buerokratt/XTR"
            "buerokratt/Authentication-Layer"
            "buerokratt/S3-Ferry"
          )

          # Create or clear the output file
          OUTPUT_FILE="docker_image_tags.txt"
          echo "Docker Image Tags:" > "$OUTPUT_FILE"

          # GitHub API token (required for authentication)
          GITHUB_TOKEN="${{ secrets.ACCESS_TOKEN }}"

          for REPO in "${REPOS[@]}"; do
            echo "Fetching tags for $REPO..."

            # Fetch package list using GitHub REST API
            response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                          "https://api.github.com/orgs/buerokratt/packages/container/${REPO#*/}/versions")

            # Print the raw response for debugging
            echo "Response for $REPO: $response"

            # Check for errors in the response
            if echo "$response" | jq -e '.message' > /dev/null; then
              echo "Error fetching tags for $REPO: $(echo "$response" | jq -r '.message')" >> "$OUTPUT_FILE"
              continue
            fi

            # Parse the JSON to list all tags (Docker image versions)
            tags=$(echo "$response" | jq -r '.[].metadata.container.tags[]')

            if [ -n "$tags" ]; then
              echo "Tags for $REPO:" >> "$OUTPUT_FILE"
              echo "$tags" >> "$OUTPUT_FILE"
            else
              echo "No tags found for $REPO." >> "$OUTPUT_FILE"
            fi
          done

          echo "Docker image tags written to $OUTPUT_FILE."

      - name: Upload docker tags file
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-tags
          path: docker_image_tags.txt
