name: Run Playwright Tests based on Task Information

on:
  repository_dispatch:
    types: [run-tests]

jobs:
  run-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Run Docker
        run: docker compose up -d
        
      - name: Install Playwright Browsers
        run: npm install @playwright/test && npx playwright install --with-deps

      - name: Determine test paths based on task description or title
        id: determine_test_paths
        run: |
          TASK_DESCRIPTION=${{ github.event.client_payload.task_description }}
          TASK_TITLE=${{ github.event.client_payload.task_title }}

          # Step 1: Try to extract a specific test file or folder path from task description
          TEST_PATHS=$(echo "$TASK_DESCRIPTION" | grep -oP '/\S+\.spec\.js')
          FOLDER_PATH=$(echo "$TASK_DESCRIPTION" | grep -oP '/\S+/')

          # If a specific test path is found in the task description, use it
          if [ ! -z "$TEST_PATHS" ]; then
            echo "Found specific test files in task description: $TEST_PATHS"
            TEST_PATHS_TO_RUN=$TEST_PATHS
          elif [ ! -z "$FOLDER_PATH" ]; then
            # Step 2: If no specific test files, but a folder is mentioned, run all tests in that folder
            echo "Found test folder in task description: $FOLDER_PATH"
            TEST_PATHS_TO_RUN=$FOLDER_PATH
          else
            # Step 3: If no paths in the description, fall back to folder based on task title
            if [[ "$TASK_TITLE" == *"auth"* ]]; then
              TEST_PATHS_TO_RUN="tests/auth"
            elif [[ "$TASK_TITLE" == *"payment"* ]]; then
              TEST_PATHS_TO_RUN="tests/payments"
            elif [[ "$TASK_TITLE" == *"cart"* ]]; then
              TEST_PATHS_TO_RUN="tests/cart"
            else
              echo "No matching test folder or file found in task description or title."
              exit 1
            fi
          fi

          echo "Running Playwright tests for: $TEST_PATHS_TO_RUN"
          echo "TEST_PATHS_TO_RUN=$TEST_PATHS_TO_RUN" >> $GITHUB_ENV

      - name: Run Playwright tests
        run: |
          npx playwright test ${{ env.TEST_PATHS_TO_RUN }}

      - name: Upload test artifacts (videos, screenshots, etc.)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Get Task and Field IDs
        id: get_field_ids
        run: |
          TASK_ID=${{ github.event.client_payload.task_id }}

          # Query GraphQL API to get the field IDs
          curl -X POST -H "Authorization: bearer ${{ secrets.PAT_TO_REPLACE }}" \
               -H "Content-Type: application/json" \
               -d '{"query": "query { node(id: \\"'$TASK_ID'\\") { ... on ProjectNextItem { id fieldValues(first: 100) { nodes { projectField { id name } value } } } } }"}' \
               https://api.github.com/graphql > response.json

          # Extract the IDs for the 'Status' field
          STATUS_FIELD_ID=$(jq -r '.data.node.fieldValues.nodes[] | select(.projectField.name == "Status") | .projectField.id' response.json)
          PROJECT_ITEM_ID=$(jq -r '.data.node.id' response.json)

          echo "Status Field ID: $STATUS_FIELD_ID"
          echo "Project Item ID: $PROJECT_ITEM_ID"

      - name: Update Task Status on Success
        if: success()
        run: |
          TASK_ID=${{ github.event.client_payload.task_id }}
          NEW_STATUS="Done"
          COMMENT="All tests passed successfully"

          # Update the custom 'Status' field via the GraphQL API
          curl -X POST -H "Authorization: bearer ${{ secrets.PAT_TO_REPLACE }}" \
               -H "Content-Type: application/json" \
               -d '{"query": "mutation { updateProjectNextItemField(input: { projectId: \\"47\\", itemId: \\"'$PROJECT_ITEM_ID'\\", fieldId: \\"'$STATUS_FIELD_ID'\\", value: \\"'$NEW_STATUS'\\" }) { projectNextItem { id } } }"}' \
               https://api.github.com/graphql

          # Post comment on the task
          curl -X POST -H "Authorization: bearer ${{ secrets.PAT_TO_REPLACE }}" \
               -H "Content-Type: application/json" \
               -d '{"query": "mutation { addComment(input: { subjectId: \\"'$PROJECT_ITEM_ID'\\", body: \\"'$COMMENT'\\" }) { clientMutationId } }"}' \
               https://api.github.com/graphql

      - name: Update Task Status on Failure
        if: failure()
        run: |
          TASK_ID=${{ github.event.client_payload.task_id }}
          NEW_STATUS="AT Rejected"
          COMMENT="Some tests failed. Please check the attached report."

          # Update the custom 'Status' field via the GraphQL API
          curl -X POST -H "Authorization: bearer ${{ secrets.PAT_TO_REPLACE }}" \
               -H "Content-Type: application/json" \
               -d '{"query": "mutation { updateProjectNextItemField(input: { projectId: \\"47\\", itemId: \\"'$PROJECT_ITEM_ID'\\", fieldId: \\"'$STATUS_FIELD_ID'\\", value: \\"'$NEW_STATUS'\\" }) { projectNextItem { id } } }"}' \
               https://api.github.com/graphql

          # Post comment on the task
          curl -X POST -H "Authorization: bearer ${{ secrets.PAT_TO_REPLACE }}" \
               -H "Content-Type: application/json" \
               -d '{"query": "mutation { addComment(input: { subjectId: \\"'$PROJECT_ITEM_ID'\\", body: \\"'$COMMENT'\\" }) { clientMutationId } }"}' \
               https://api.github.com/graphql
